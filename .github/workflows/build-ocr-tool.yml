# Name for your workflow, which will appear in the GitHub Actions tab
name: Build OCR Console App

# This workflow will run automatically every time you push code to your repository
on: [push]

jobs:
  build:
    # Use the latest available Windows virtual machine to build the project
    runs-on: windows-latest

    steps:
    # 1. Checks out a copy of your repository onto the virtual machine
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Sets up the MSBuild environment, which is needed for Windows App SDK projects
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # 3. Sets up the .NET 8 SDK
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # 4. Restores all the necessary NuGet packages for your project
    - name: Restore NuGet packages
      run: msbuild .\FoundryOcr.Cli.csproj -t:Restore -p:Configuration=Release

    # 5. Builds the project in Release mode for the x64 platform.
    #    The "WindowsAppSDKSelfContained=true" flag is crucial. It bundles the
    #    Windows App SDK libraries into the output folder so the .exe can run anywhere.
    - name: Build the application
      run: msbuild .\FoundryOcr.Cli.csproj -p:Configuration=Release -p:Platform=x64 -p:WindowsAppSDKSelfContained=true

    # 6. Takes the compiled files from the build output and packages them into
    #    an artifact (a downloadable file) named "ocr-tool".
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ocr-tool
        # This path points to the build output folder for a self-contained app
        path: bin\x64\Release\net8.0-windows10.0.22621.0\win-x64\publish\
